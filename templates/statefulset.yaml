apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "mongodb.fullname" . }}
  labels:
    app: {{ template "mongodb.name" . }}
    chart: {{ template "mongodb.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 4 }}
{{- end }}
spec:
  serviceName: {{ template "mongodb.fullname" . }}-discovery
  replicas: {{ .Values.statefulset.replicaCount }}
  revisionHistoryLimit: 2
  updateStrategy:
    type: {{ .Values.statefulset.updateStrategy }}
  selector:
    matchLabels:
      app: {{ template "mongodb.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
      {{- range $key, $value := .Values.statefulset.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
{{- if and .Values.prometheus.exporter.enabled  (not .Values.prometheus.operator.enabled) }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.exporter.port | quote }}
        prometheus.io/path: {{ .Values.prometheus.exporter.path | quote }}
{{- end }}
      labels:
        app: {{ template "mongodb.name" . }}
        release: "{{ .Release.Name }}"
        chart: {{ template "mongodb.chart" . }}
    spec:
      serviceAccountName: {{ template "mongodb.serviceAccountName" . }}
      terminationGracePeriodSeconds: {{ .Values.statefulset.terminationGracePeriodSeconds }}
      {{- if .Values.statefulset.nodeSelector }}
      securityContext:
        {{ toYaml .Values.securityContext | indent 8 }}
      nodeSelector:
{{ toYaml .Values.statefulset.nodeSelector | indent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.statefulset.terminationGracePeriodSeconds }}
      {{- with .Values.statefulset.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.statefulset.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      {{- if .Values.statefulset.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.statefulset.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.statefulset.image.repository }}:{{ .Values.statefulset.image.tag }}"
        imagePullPolicy: {{ .Values.statefulset.image.pullPolicy | quote }}
        command:
        - mongod
        args:
        - --replSet={{ .Values.statefulset.env.MONGO_REPLICA_SET_NAME }}
        - --smallfiles
        - --noprealloc
        - --bind_ip_all
        env:
        {{- if .Values.statefulset.env.MONGO_INITDB_ROOT_PASSWORD }}
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ template "mongodb.fullname" . }}
              key: mongodb-root-username
        {{- end }}
        {{- if .Values.statefulset.env.MONGO_INITDB_ROOT_PASSWORD }}
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mongodb.fullname" . }}
              key: mongodb-root-password
        {{- end }}
        {{- if .Values.statefulset.env.MONGO_INITDB_ROOT_PASSWORD }}
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            secretKeyRef:
              name: {{ template "mongodb.fullname" . }}
              key: mongodb-root-database
        {{- end }}
        ports:
        - name: mongodb
          protocol: TCP
          containerPort: 27017
#         livenessProbe:
#           exec:
#             command:
#             - mongo
#             - --eval
#             - "db.adminCommand('ping')"
# {{ toYaml .Values.statefulset.livenessProbe | indent 10 }}
#         readinessProbe:
#           exec:
#             command:
#             - mongo
#             - --eval
#             - "db.adminCommand('ping')"
# {{ toYaml .Values.statefulset.readinessProbe | indent 10 }}
        resources:
{{ toYaml .Values.statefulset.resources | indent 10 }}
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
          readOnly: false
        {{- if .Values.configmap }}
        - name: config
          mountPath: /opt/bitnami/mongodb/conf/mongodb.conf
          subPath: mongodb.conf
        {{- end }}
      {{ if .Values.prometheus.exporter.enabled }}
      - name: {{ .Chart.Name }}-exporter
        image: {{ .Values.prometheus.exporter.image.repository }}:{{ .Values.prometheus.exporter.image.tag }}
        imagePullPolicy: {{ .Values.prometheus.exporter.image.pullPolicy }}
        ports:
        - name: exporter
          protocol: TCP
          containerPort: {{ .Values.prometheus.exporter.port }}
        # env:
        # - name: MONGODB_URL
        #   value: "mongodb://mongodb:27017"
        resources:
{{ toYaml .Values.prometheus.exporter.resources | indent 12 }}
      {{- end }}
      volumes:
      - name: mongo-persistent-storage
      {{- if .Values.statefulset.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.statefulset.persistence.existingClaim }}{{ .Values.statefulset.persistence.existingClaim }}{{- else }}{{ template "mongodb.fullname" . }}{{- end }}
      {{- else }}
        hostPath:
          path: {{ .Values.statefulset.persistence.hostPath | quote }}
      {{- end -}}
      {{- if .Values.configmap }}
      - name: config
        configMap:
          name: {{ template "mongodb.fullname" . }}
      {{- end }}
